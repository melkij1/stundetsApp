{"remainingRequest":"/Users/melkij/Documents/Project/Students/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/melkij/Documents/Project/Students/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/melkij/Documents/Project/Students/src/App.vue","mtime":1564736608000},{"path":"/Users/melkij/Documents/Project/Students/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/melkij/Documents/Project/Students/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/melkij/Documents/Project/Students/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/melkij/Documents/Project/Students/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/melkij/Documents/Project/Students/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport ModalForm from './components/ModalForm.vue'\nimport TableStudent from './components/TableStudent.vue'\nimport mixins from './mixins'\n\nexport default {\n  name: 'app',\n  mixins: [mixins],\n  data(){\n    return {\n      lists: [\n        { id: 1, name: \"Вася\", family: \"Петров\", data: \"06.10.1993\", group: \"ИВТ-1-15\", isChecked: false, edit: false },\n        { id: 2, name: \"Иван\", family: \"Пупкин\", data: \"10.06.1990\", group: \"ИВТ-3-135\", isChecked: false, edit: false },\n      ],\n\n      isOpen: false,\n      model: {},\n      modelIndex: null,\n      error: '',\n    }\n  },\n  components: {\n    ModalForm,\n    TableStudent\n  },\n  methods: {\n    saveItem(event) {\n      const { item } = event;\n      this.error = this.validateStudent(item);\n      if (!this.error) {\n        if (item.id == null) {\n          item.id = this.getMaxIdFromLists() + 1\n          this.lists.push(item);\n        } else {\n          this.lists[this.findIndexById(item.id)] = item;\n        }\n        this.model = {}\n        this.modelIndex = null;\n        this.isOpen = false;\n      }\n    },\n    getMaxIdFromLists () {\n      return Math.max.apply(Math, this.lists.map(item => item.id))\n    },\n    deleteItems(ids){\n      if (!ids) {\n          return\n      }\n      ids.forEach((id) => {\n          this.lists.splice(this.findIndexById(id), 1)\n      })\n    },\n    edit_student_method(model, index) {\n      this.isOpen = true;\n      this.modelIndex= index;\n      this.model = model\n    },\n    closeModel(){\n      this.isOpen = false;\n      this.model = {}\n      this.modelIndex = null\n    },\n    validateStudent(student) {\n      if (!/^[а-яё]+$/i.test(student.name)) {\n        return 'Имя должно содержать только кириллические символы';\n      }\n      if (!/^[а-яё]+$/i.test(student.family)) {\n        return 'Фамилия должна содержать только кириллические символы';\n      }\n      if (!/^[А-ЯЁ]{2,4}-[0-9]+-[0-9]+$/.test(student.group)) {\n        return 'Неверный номер группы';\n      }\n      return '';\n    },\n\n  }\n}\n",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n    <button class=\"btn-add\"\n      @click=\"isOpen=!isOpen\"\n    >\n      Добавить студента\n    </button>\n    <ModalForm\n      v-if=\"isOpen\"\n      @saveItem=\"saveItem\"\n      @close=\"closeModel\"\n      :model-index=\"modelIndex\"\n      :init-model=\"model\"\n      :error=\"error\"\n    />\n    <TableStudent\n      modal=\"false\"\n      :lists=\"lists\"\n      @edit_student=\"edit_student_method\"\n      @delete-item=\"deleteItems\"\n    />\n  </div>\n</template>\n\n<script>\nimport ModalForm from './components/ModalForm.vue'\nimport TableStudent from './components/TableStudent.vue'\nimport mixins from './mixins'\n\nexport default {\n  name: 'app',\n  mixins: [mixins],\n  data(){\n    return {\n      lists: [\n        { id: 1, name: \"Вася\", family: \"Петров\", data: \"06.10.1993\", group: \"ИВТ-1-15\", isChecked: false, edit: false },\n        { id: 2, name: \"Иван\", family: \"Пупкин\", data: \"10.06.1990\", group: \"ИВТ-3-135\", isChecked: false, edit: false },\n      ],\n\n      isOpen: false,\n      model: {},\n      modelIndex: null,\n      error: '',\n    }\n  },\n  components: {\n    ModalForm,\n    TableStudent\n  },\n  methods: {\n    saveItem(event) {\n      const { item } = event;\n      this.error = this.validateStudent(item);\n      if (!this.error) {\n        if (item.id == null) {\n          item.id = this.getMaxIdFromLists() + 1\n          this.lists.push(item);\n        } else {\n          this.lists[this.findIndexById(item.id)] = item;\n        }\n        this.model = {}\n        this.modelIndex = null;\n        this.isOpen = false;\n      }\n    },\n    getMaxIdFromLists () {\n      return Math.max.apply(Math, this.lists.map(item => item.id))\n    },\n    deleteItems(ids){\n      if (!ids) {\n          return\n      }\n      ids.forEach((id) => {\n          this.lists.splice(this.findIndexById(id), 1)\n      })\n    },\n    edit_student_method(model, index) {\n      this.isOpen = true;\n      this.modelIndex= index;\n      this.model = model\n    },\n    closeModel(){\n      this.isOpen = false;\n      this.model = {}\n      this.modelIndex = null\n    },\n    validateStudent(student) {\n      if (!/^[а-яё]+$/i.test(student.name)) {\n        return 'Имя должно содержать только кириллические символы';\n      }\n      if (!/^[а-яё]+$/i.test(student.family)) {\n        return 'Фамилия должна содержать только кириллические символы';\n      }\n      if (!/^[А-ЯЁ]{2,4}-[0-9]+-[0-9]+$/.test(student.group)) {\n        return 'Неверный номер группы';\n      }\n      return '';\n    },\n\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n\n.btn-add{\n  font-size: 15px;\n  padding: 5px 10px;\n  border: transparent;\n  background-color: green;\n  color: #ffffff;\n}\n</style>\n"]}]}